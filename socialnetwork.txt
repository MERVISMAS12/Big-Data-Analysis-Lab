install.packages("igraph")
library(igraph)
install.packages("CliquePercolation")
library(CliquePercolation)



edges <- c(1, 2, 1, 3, 1, 8,
          2, 3, 2, 4, 2, 5, 2, 6, 2, 8,
          3, 7,
          4, 5, 4, 6,
          5, 6,
          6,7 )

g<- graph(edges=edges, directed=FALSE)



plot(g, vertex.size=30, vertex.label.cex=1.5, edge.color="gray",
   vertex.color="lightblue", layout=layout_with_fr, main="Original Graph")



communities_gn <- cluster_edge_betweenness(g)
print(membership(communities_gn))



plot(communities_gn, g, vertex.size=30, vertex.label.cex=1.5,
      edge.color="gray", vertex.color=membership(communities_gn),
      layout=layout_with_fr, # Change '-' to '=' for assignment
      main="Girvan-Newman Communities")



cliques <- cliques(g, min=3, max=3)
print(cliques)



plot_clique <- function(clique_nodes, clique_id) {
  clique_subgraph <- induced_subgraph(g, clique_nodes)

  plot(clique_subgraph, vertex.size=50, vertex.label.cex=1.5, edge.color="gray",
       vertex.color="lightgreen", layout=layout_with_fr,
       main=paste("Clique", clique_id))

}

par(mfrow=c(ceiling(length(cliques)/2), 3))
for (i in seq_along(cliques)) {
  plot_clique(cliques[[i]],i)
}



overlap_graph <- make_empty_graph(n=length(cliques))

for (i in seq_along(cliques)) {

  for (j in seq_along(cliques)) {

    if(i<j && length (intersect(cliques [[i]], cliques [[j]])) >= 2) {

overlap_graph <- add_edges(overlap_graph,c(i,j))
}
}
}



clique_communities <- components(overlap_graph)$membership
membership_vector <- rep(0, vcount(g))

for(i in seq_along(cliques)) {
  membership_vector[cliques[[i]]] <- clique_communities[i]
}



plot(g, vertex.size=38, vertex.label.cex=1.5, edge.color="gray",
    vertex.color=membership_vector, layout=layout_with_fr,
    main="Clique Percolation Communities (k-3)")



plot_community <- function(community_id, membership_vector) {
community_nodes <- which (membership_vector ==community_id)
community_subgraph <- induced_subgraph(g, community_nodes)

plot(community_subgraph, vertex.size=30, vertex.label.cex=1.5, edge.color="gray",
    vertex.color=rainbow(max(membership_vector)) [community_id],
    layout=layout_with_fr,
    main=paste("Community", community_id))
}

par(mfrow=c(ceiling(max(membership_vector)/2), 2))
  for(i in seq_along (unique(membership_vector))) {
    plot_community(i, membership_vector)
}